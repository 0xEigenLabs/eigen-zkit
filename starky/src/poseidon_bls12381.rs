#![allow(deprecated, dead_code)]
#![allow(clippy::derive_hash_xor_eq, clippy::too_many_arguments)]
use crate::constant::POSEIDON_BLS12381_CONSTANTS;
use crate::field_bls12381::Fr;
use crate::poseidon_bls12381_constants as constants;
use ff::*;

/// Using recommended parameters from whitepaper https://eprint.iacr.org/2019/458.pdf (table 2, table 8)
/// Generated by https://extgit.iaik.tugraz.at/krypto/hadeshash/-/blob/master/code/calc_round_numbers.py
/// And rounded up to nearest integer that divides by t
#[derive(Debug)]
pub struct Constants {
    pub c: Vec<Vec<Fr>>,
    pub m: Vec<Vec<Vec<Fr>>>,
    pub p: Vec<Vec<Vec<Fr>>>,
    pub s: Vec<Vec<Fr>>,
    pub n_rounds_f: usize,
    pub n_rounds_p: Vec<usize>,
}

pub fn load_constants() -> Constants {
    let (c_str, m_str) = constants::constants();
    let mut c: Vec<Vec<Fr>> = Vec::new();
    for v1 in c_str {
        let mut cci: Vec<Fr> = Vec::new();
        for v2 in v1 {
            let b: Fr = from_hex(v2).unwrap();
            cci.push(b);
        }
        c.push(cci);
    }
    let mut m: Vec<Vec<Vec<Fr>>> = Vec::new();
    for v1 in m_str {
        let mut mi: Vec<Vec<Fr>> = Vec::new();
        for v2 in v1 {
            let mut mij: Vec<Fr> = Vec::new();
            for s in v2 {
                let b: Fr = from_hex(s).unwrap();
                mij.push(b);
            }
            mi.push(mij);
        }
        m.push(mi);
    }
    Constants {
        c,
        m,
        p: Vec::new(),
        s: Vec::new(),
        n_rounds_f: 8,
        n_rounds_p: vec![
            55, 55,
        ],
    }
}

pub struct Poseidon;

impl Default for Poseidon {
    fn default() -> Self {
        Self::new()
    }
}

impl Poseidon {
    pub fn new() -> Poseidon {
        Self {}
    }
    pub fn ark(&self, state: &mut Vec<Fr>, c: &[Fr], it: usize) {
        for i in 0..state.len() {
            state[i].add_assign(&c[it + i]);
        }
    }

    #[inline(always)]
    fn pow5(x: &mut Fr) {
        let aux = *x;
        x.square();
        x.square();
        x.mul_assign(&aux);
    }

    pub fn sbox(&self, n_rounds_f: usize, n_rounds_p: usize, state: &mut Vec<Fr>, i: usize) {
        if i < n_rounds_f / 2 || i >= n_rounds_f / 2 + n_rounds_p {
            for x in state {
                Self::pow5(x);
            }
        } else {
            Self::pow5(&mut state[0])
        }
    }

    pub fn mix(&self, state: &Vec<Fr>, m: &[Vec<Fr>]) -> Vec<Fr> {
        let mut new_state: Vec<Fr> = Vec::new();
        for i in 0..state.len() {
            new_state.push(Fr::zero());
            for (j, x) in state.iter().enumerate() {
                let mut mij = m[i][j];
                mij.mul_assign(x);
                new_state[i].add_assign(&mij);
            }
        }
        new_state
    }

    /// Hash function
    /// init_state would be Fr::zero() initially
    pub fn hash(&self, inp: &Vec<Fr>, init_state: &Fr) -> Result<Fr, String> {
        let result = self.hash_inner(inp, init_state, 1)?;
        Ok(result[0])
    }

    pub fn hash_ex(&self, inp: &Vec<Fr>, init_state: &Fr, out: usize) -> Result<Vec<Fr>, String> {
        self.hash_inner(inp, init_state, out)
    }

    fn hash_inner(&self, inp: &Vec<Fr>, init_state: &Fr, out: usize) -> Result<Vec<Fr>, String> {
        if inp.is_empty() || inp.len() > POSEIDON_BLS12381_CONSTANTS.n_rounds_p.len() {
            return Err(format!(
                "Wrong inputs length {} > {}",
                inp.len(),
                POSEIDON_BLS12381_CONSTANTS.n_rounds_p.len()
            ));
        }

        let t = inp.len() + 1;
        let n_rounds_f = POSEIDON_BLS12381_CONSTANTS.n_rounds_f;
        let n_rounds_p = POSEIDON_BLS12381_CONSTANTS.n_rounds_p[t - 2];

        let mut state = vec![init_state.clone(); t];
        state[1..].clone_from_slice(&inp);

        for i in 0..(n_rounds_f + n_rounds_p) {
            self.ark(&mut state, &POSEIDON_BLS12381_CONSTANTS.c[t - 2], i * t);
            self.sbox(n_rounds_f, n_rounds_p, &mut state, i);
            state = self.mix(&state, &POSEIDON_BLS12381_CONSTANTS.m[t - 2]);
        }
        Ok((&state[0..out]).to_vec())
    }
}

#[cfg(test)]
mod tests {
    use crate::field_bls12381::Fr;
    use crate::poseidon_bls12381::*;

    #[test]
    fn test_load_constants() {
        let cons = load_constants();
        assert_eq!(
            cons.c[0][0].to_string(),
            "Fr(0x525dd14d753a142ba9f083211a71385591c3aa1c56b69c6a35ffe039e9c9b72e)"
        );
        assert_eq!(
            cons.c[cons.c.len() - 1][0].to_string(),
            "Fr(0x669f064bfa3ae17a23bd51861dbb4a24501eac92a2758b36a7320a009d6ed3d8)"
        );
        assert_eq!(
            cons.m[0][0][0].to_string(),
            "Fr(0x4acfa3fc28567df278a6d5792422fdc1670ea3c816210da427b3f2b6c7cfd6fd)"
        );
        assert_eq!(
            cons.m[cons.m.len() - 1][0][0].to_string(),
            "Fr(0x4d491a377113a8daccd13ab0066be558e27e6d5755543d54aaaaaaaa00000001)"
        );
    }

    #[test]
    fn test_poseidon_hash() {
        let poseidon = Poseidon::new();

        let b0: Fr = Fr::from_str("0").unwrap();
        let b1: Fr = Fr::from_str("1").unwrap();
        let b2: Fr = Fr::from_str("2").unwrap();
        let b3: Fr = Fr::from_str("3").unwrap();
        let b4: Fr = Fr::from_str("4").unwrap();
        let b5: Fr = Fr::from_str("5").unwrap();
        let b6: Fr = Fr::from_str("6").unwrap();

        let is = Fr::zero();
        let h = poseidon.hash(&vec![b1, b2], &is).unwrap();
        assert_eq!(
            h.to_string(),
            "Fr(0x28ce19420fc246a05553ad1e8c98f5c9d67166be2c18e9e4cb4b4e317dd2a78a)"
        );
    }
}
